{"version":3,"sources":["components/UsersTable.jsx","App.js","reportWebVitals.js","index.js"],"names":["UsersTable","useState","users","setUsers","update","setUpdate","fetchUsers","a","axios","get","then","response","results","data","console","log","catch","error","useEffect","user","search","setSearch","newUsers","find","name","first","className","type","placeholder","onChange","event","target","value","onClick","sortUsers","sort","b","localeCompare","map","index","src","picture","medium","alt","last","phone","email","moment","dob","date","format","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAoFiBA,EA/EE,WACf,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,oBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KACMC,EAAU,uCAAG,sBAAAC,EAAA,sEACTC,IAAMC,IAAI,yCACfC,MAAK,SAACC,GACH,IAAOC,EAAWD,EAASE,KAApBD,QACPT,EAASS,GACTE,QAAQC,IAAIJ,MAEfK,OAAM,SAACC,GACJH,QAAQC,IAAIE,MARD,2CAAH,qDAWhBC,qBAAU,WAEN,OADAZ,IACO,WACHD,GAAU,MAEf,CAACD,IACJ,MAA4BH,mBAAS,CAACkB,KAAM,KAA5C,mBAAOC,EAAP,KAAeC,EAAf,KAKAH,qBAAU,WACN,IAAMI,EAAWpB,EAAMqB,MAAK,SAAAJ,GAAI,OAAIA,GAAQA,EAAKK,KAAKC,QAAUL,EAAOD,KAAOA,EAAO,MACrFL,QAAQC,IAAIO,KACb,CAACF,EAAOD,OAMX,OACE,sBAAKO,UAAU,QAAf,uBAEE,uBAAOC,KAAK,OAAOH,KAAK,OAAOI,YAAY,SAASC,SAhBrC,SAACC,GAChB,MAAsBA,EAAMC,OAArBP,EAAP,EAAOA,KAAMQ,EAAb,EAAaA,MACbX,EAAU,2BAAID,GAAL,kBAAcI,EAAOQ,MAc4CA,MAAOZ,EAAOD,OACxF,kCACI,gCACI,+BACI,uCACA,oBAAIc,QAbD,WACf,IAAMC,EAAYhC,EAAMiC,MAAK,SAAC5B,EAAG6B,GAAJ,OAAU7B,EAAEiB,KAAKC,MAAMY,cAAcD,EAAEZ,KAAKC,UACzEX,QAAQC,IAAImB,GACZ/B,EAAS+B,IAUG,kBACA,uCACA,uCACA,0CAGR,gCAEIhC,EAAMoC,KAAI,SAACnB,EAAMoB,GAAP,OACN,+BACI,6BACI,qBAAKb,UAAU,iBAAf,SACI,qBAAKc,IAAKrB,EAAKsB,QAAQC,OAAQC,IAAI,gBAG3C,+BACKxB,EAAKK,KAAKC,MADf,KACwBN,EAAKK,KAAKoB,QAElC,6BACKzB,EAAK0B,QAEV,6BACK1B,EAAK2B,QAEV,6BACKC,IAAO5B,EAAK6B,IAAIC,MAAMC,OAAO,qBAhB7BX,eC9CdY,EARH,WACV,OACE,qBAAKzB,UAAU,MAAf,SACE,cAAC,EAAD,OCOS0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5C,MAAK,YAAkD,IAA/C6C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.11da4a3f.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport './styles/users.scss';\r\n\r\nconst UsersTable = () => {\r\n    const [users, setUsers] = useState([]);\r\n    const [update, setUpdate] = useState(false);\r\n    const fetchUsers = async () => {\r\n        await axios.get('https://randomuser.me/api/?results=20')\r\n        .then((response) => {\r\n            const {results} = response.data;\r\n            setUsers(results); \r\n            console.log(response);\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        });\r\n    }   \r\n    useEffect(() => {\r\n        fetchUsers();\r\n        return () => {\r\n            setUpdate(false);\r\n        }\r\n    }, [update]);\r\n    const [search, setSearch] = useState({user: ''})\r\n    const searchUser = (event) => {\r\n        const {name, value} = event.target;\r\n        setSearch({...search, [name]: value})  \r\n    }\r\n    useEffect(() => {\r\n        const newUsers = users.find(user => user && user.name.first === search.user ? user : '');\r\n        console.log(newUsers);\r\n    }, [search.user]);\r\n    const sortByName = () => {\r\n        const sortUsers = users.sort((a, b) => a.name.first.localeCompare(b.name.first))\r\n        console.log(sortUsers);\r\n        setUsers(sortUsers);\r\n    }\r\n    return (\r\n      <div className=\"users\">\r\n        UsersTable\r\n        <input type=\"text\" name=\"user\" placeholder=\"search\" onChange={searchUser} value={search.user} />\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Image</th>\r\n                    <th onClick={sortByName}>Name</th>\r\n                    <th>Phone</th>\r\n                    <th>Email</th>\r\n                    <th>DOB</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            {\r\n                users.map((user, index) => \r\n                    <tr key={index}>\r\n                        <td>\r\n                            <div className=\"profilePicture\">\r\n                                <img src={user.picture.medium} alt=\"profile\" />\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                            {user.name.first}  {user.name.last}\r\n                        </td>\r\n                        <td>\r\n                            {user.phone}\r\n                        </td>\r\n                        <td>\r\n                            {user.email}\r\n                        </td>\r\n                        <td>\r\n                            {moment(user.dob.date).format('MMMM DD, YYYY')}\r\n                        </td>\r\n                    </tr>\r\n                )\r\n            }\r\n            </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  \r\n  export default UsersTable;\r\n  ","import UsersTable from './components/UsersTable'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <UsersTable />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}